#include <bits/stdc++.h>
using namespace std;
struct node
{
    node *left=NULL;
    int data;
    node *right=NULL;
};
node * insert(node *temp, int data)
{
    if(temp==NULL){
        node *p=new node;
        p->data=data;
        return p;
    }
    if(temp->data>data){
        temp->left=insert(temp->left,data);
    }
    else{
        temp->right=insert(temp->right,data);
    }
}
bool search(node *temp, int data)
{
    if(temp==NULL){
        return 0;
    }
    if(temp->data==data){
        return 1;
    }
    else{
        if(temp->data>data){
            return search(temp->left,data);
        }
        else{
            return search(temp->right,data);
        }
    }
}
int height(node *temp)
{
    if(temp==NULL){
        return 0;
    }
    return 1+max(height(temp->left),height(temp->right));
}
int inorder_pred(node *temp)
{
    if(temp->right==NULL){
        return temp->data;
    }
        return inorder_pred(temp->right);
}
int inorder_succ(node *temp)
{
    if(temp->left==NULL){
        return temp->data;
    }
    return inorder_succ(temp->left);
}
node * delete_node(node *temp, int data)
{
    if(temp==NULL){
        return NULL;
    }
    if(temp->left==NULL && temp->right==NULL && temp->data==data){
        delete temp;
        return NULL;
    }
    if(temp->data==data){
        if(height(temp->left)==0 && height(temp->right)==0){
            delete temp;
            return NULL;
        }
        else if(height(temp->left)>=height(temp->right)){
            temp->data=inorder_pred(temp->left);
            temp->left=delete_node(temp->left,inorder_pred(temp->left));
        }
        else{
            temp->data=inorder_succ(temp->right);
            temp->right=delete_node(temp->right,data);
        }
    }
    else{
        if(temp->data>data){
            temp->left=delete_node(temp->left,data);
        }
        else{
            temp->right=delete_node(temp->right,data);
        }
    }
}
void inorder(node *temp)
{
    if(temp==NULL){
        return;
    }
    inorder(temp->left);
    cout<<temp->data<<" ";
    inorder(temp->right);
}
int main()
{
    node *root=NULL;
    root=insert(root,50);
    root=insert(root,25);
    root=insert(root,23);
    root=insert(root,75);
    root=insert(root,100);
    root=insert(root,41);
    root=insert(root,55);
    inorder(root);
    cout<<endl;
    delete_node(root,50);
    inorder(root);
    return 0;
}
